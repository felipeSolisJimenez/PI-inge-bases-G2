namespace FeLuisesScrumDEV.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class Employee
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Employee()
        {
            this.DeveloperKnowledge = new HashSet<DeveloperKnowledge>();
            this.Requeriment = new HashSet<Requeriment>();
            this.WorksIn = new HashSet<WorksIn>();
        }
    
        [Key]
        [RegularExpression(@"^[0-9]{9}$", ErrorMessage = "ID must contain 9 integers.")]
        [MaxLength(9, ErrorMessage = "Employee's ID must be 9 characters long.")]
        public string idEmployeePK { get; set; }
        [MaxLength(20, ErrorMessage = "Employee name can't be longer than 20 characters.")]
        [Required(ErrorMessage = "Employee name is obligatory.")]
        public string employeeName { get; set; }
        [MaxLength(20, ErrorMessage = "Employee last name can't be longer than 20 characters.")]
        [Required(ErrorMessage = "Employee last name is obligatory.")]
        public string employeeLastName { get; set; }
        [MaxLength(20, ErrorMessage = "Employee second last name can't be longer than 20 characters.")]
        public string employeeSecondLastName { get; set; }
        [Required(ErrorMessage = "Must enter employee birth date date.")]
        [DataType(DataType.DateTime)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:MM/dd/yyyy}")]
        public Nullable<System.DateTime> employeeBirthDate { get; set; }
        [Required(ErrorMessage = "Must enter employees hire date.")]
        [DataType(DataType.DateTime)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:MM/dd/yyyy}")]
        public System.DateTime employeeHireDate { get; set; }
        public Nullable<short> developerFlag { get; set; }
        [RegularExpression(@"^[0-9-]{8,20}$", ErrorMessage = "Telephone number only accepts 0-9 and '-'.")]
        public string tel { get; set; }
        public string email { get; set; }
        [MaxLength(20, ErrorMessage = "province name can't be longer than 20 characters.")]
        public string province { get; set; }
        [MaxLength(20, ErrorMessage = "Canton name can't be longer than 20 characters.")]
        public string canton { get; set; }
        [MaxLength(20, ErrorMessage = "District name can't be longer than 20 characters.")]
        public string district { get; set; }
        [MaxLength(35, ErrorMessage = "Exact direction name can't be longer than 35 characters.")]
        public string exactDirection { get; set; }
        [RegularExpression(@"^\d{1,20}$", ErrorMessage = "Budget must contain no more than 20 integers and 2 decimals.")]
        [Range(0, 9999999999999999.99)]
        public Nullable<decimal> pricePerHour { get; set; }
        public Nullable<short> availability { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<DeveloperKnowledge> DeveloperKnowledge { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Requeriment> Requeriment { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<WorksIn> WorksIn { get; set; }
    }
}

/*
De querer validar el registro de clientes estilo con la misma cedula siendo esta la llave primaria se tendria que tener un validador
que se llame en el metodo de creacion del controlador estilo        public class ClientValidation
            public static ValidationResult validateName(String id)
            {
                FeLuisesEntities db = new FeLuisesEntities();
                if (db.Client.Any(x => x.idClientPK == id) || db.Employee.Any(x => x.idEmployeePK == id))
                    return new ValidationResult("A person id must be unique");
                return ValidationResult.Success;
            }
/*